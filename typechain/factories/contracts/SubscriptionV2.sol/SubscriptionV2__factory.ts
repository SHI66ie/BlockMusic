/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SubscriptionV2,
  SubscriptionV2Interface,
} from "../../../contracts/SubscriptionV2.sol/SubscriptionV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newPriceFeed",
        type: "address",
      },
    ],
    name: "PriceFeedUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "Subscribed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newEndTime",
        type: "uint256",
      },
    ],
    name: "SubscriptionExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newUSDCToken",
        type: "address",
      },
    ],
    name: "USDCTokenUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "DAILY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MONTHLY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAYMENT_RECIPIENT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "YEARLY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getETHPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getSubscriptionStatus",
    outputs: [
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "remainingTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isSubscribed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdcToken",
        type: "address",
      },
    ],
    name: "setUSDCToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
    ],
    name: "subscribeWithETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
    ],
    name: "subscribeWithUSDC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdcToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userSubscriptions",
    outputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "totalPaid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600280546001600160a01b03191673036cbd53842c5426634e7929541ec2318f3dcf7e17905534801561003657600080fd5b50604051610f78380380610f7883398101604081905261005591610101565b6001600055338061008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610089816100af565b50600380546001600160a01b0319166001600160a01b0392909216919091179055610131565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561011357600080fd5b81516001600160a01b038116811461012a57600080fd5b9392505050565b610e38806101406000396000f3fe6080604052600436106101025760003560e01c80638fb456d711610095578063a54069f411610064578063a54069f41461029e578063a607a8d9146102c6578063b92ae87c146102db578063cf14b9e41461030b578063f2fde38b1461037957600080fd5b80638fb456d71461023c57806392112162146102545780639f809c8f14610267578063a06443771461027e57600080fd5b8063715018a6116100d1578063715018a6146101c9578063724e78da146101de578063741bef1a146101fe5780638da5cb5b1461021e57600080fd5b80630f5a9d011461010e57806311eac855146101305780631ddda9b61461016d57806350ada728146101a457600080fd5b3661010957005b600080fd5b34801561011a57600080fd5b5061012e610129366004610cb4565b610399565b005b34801561013c57600080fd5b50600254610150906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017957600080fd5b5061018d610188366004610cb4565b6103f6565b604080519215158352602083019190915201610164565b3480156101b057600080fd5b506101bb6203d09081565b604051908152602001610164565b3480156101d557600080fd5b5061012e610482565b3480156101ea57600080fd5b5061012e6101f9366004610cb4565b610496565b34801561020a57600080fd5b50600354610150906001600160a01b031681565b34801561022a57600080fd5b506001546001600160a01b0316610150565b34801561024857600080fd5b506101bb63017d784081565b61012e610262366004610cdd565b6104ec565b34801561027357600080fd5b506101bb622625a081565b34801561028a57600080fd5b5061012e610299366004610cdd565b6107b9565b3480156102aa57600080fd5b506101507349ec6fff8d915dc8f1ff382941d0c5dadf9f013b81565b3480156102d257600080fd5b506101bb610993565b3480156102e757600080fd5b506102fb6102f6366004610cb4565b610a78565b6040519015158152602001610164565b34801561031757600080fd5b50610353610326366004610cb4565b60046020526000908152604090208054600182015460028301546003909301549192909160ff9091169084565b604080519485526020850193909352901515918301919091526060820152608001610164565b34801561038557600080fd5b5061012e610394366004610cb4565b610adb565b6103a1610b16565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f60ecdd2cf009b737c2bad96928fb8b73fbcfee8a8bcf6e83f551f23895625e2f906020015b60405180910390a150565b6001600160a01b0381166000908152600460209081526040808320815160808101835281548152600182015493810193909352600281015460ff161580159284018390526003909101546060840152839291906104565750806020015142105b92504281602001511161046a57600061047a565b42816020015161047a9190610d0c565b915050915091565b61048a610b16565b6104946000610b43565b565b61049e610b16565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e6906020016103eb565b6104f4610b95565b80600114806105035750806002145b8061050e5750806003145b61054e5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b60448201526064015b60405180910390fd5b60008082600103610574576105676203d090601e610d25565b915062278d00905061059a565b8260020361058c5750622625a0905062278d0061059a565b5063017d784090506301e133805b60006105a4610993565b90506000816105bb85670de0b6b3a7640000610d25565b6105c59190610d3c565b90508034101561060f5760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610545565b6040516000907349ec6fff8d915dc8f1ff382941d0c5dadf9f013b9083908381818185875af1925050503d8060008114610665576040519150601f19603f3d011682016040523d82523d6000602084013e61066a565b606091505b50509050806106b05760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b6044820152606401610545565b81341115610759576000336106c58434610d0c565b604051600081818185875af1925050503d8060008114610701576040519150601f19603f3d011682016040523d82523d6000602084013e610706565b606091505b50509050806107575760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f20726566756e64206578636573732045544800000000006044820152606401610545565b505b610764338587610bbf565b604080518781526020810187905290810185905233907f5ad333a6d56a7ddb1e78d9ecb8047e9dafcb890a41a227ede8d950259a1f0f759060600160405180910390a250505050506107b66001600055565b50565b6107c1610b95565b80600114806107d05750806002145b806107db5750806003145b6108165760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b6044820152606401610545565b6000808260010361083c5761082f6203d090601e610d25565b915062278d009050610862565b826002036108545750622625a0905062278d00610862565b5063017d784090506301e133805b6002546040516323b872dd60e01b81523360048201527349ec6fff8d915dc8f1ff382941d0c5dadf9f013b6024820152604481018490526000916001600160a01b0316906323b872dd906064016020604051808303816000875af11580156108ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f29190610d5e565b9050806109385760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610545565b610943338385610bbf565b604080518581526020810185905290810183905233907f5ad333a6d56a7ddb1e78d9ecb8047e9dafcb890a41a227ede8d950259a1f0f759060600160405180910390a25050506107b66001600055565b6003546000906001600160a01b031615610a6e57600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015610a16575060408051601f3d908101601f19168201909252610a1391810190610d9f565b60015b610a245750642e90edd00090565b60008413610a645760405162461bcd60e51b815260206004820152600d60248201526c496e76616c696420707269636560981b6044820152606401610545565b5091949350505050565b50642e90edd00090565b6001600160a01b0381166000908152600460209081526040808320815160808101835281548152600182015493810193909352600281015460ff161580159284018390526003909101546060840152610ad45750806020015142105b9392505050565b610ae3610b16565b6001600160a01b038116610b0d57604051631e4fbdf760e01b815260006004820152602401610545565b6107b681610b43565b6001546001600160a01b031633146104945760405163118cdaa760e01b8152336004820152602401610545565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005403610bb857604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001600160a01b0383166000908152600460205260409020600281015460ff168015610bee5750428160010154115b15610c7f5782816001016000828254610c079190610def565b9250508190555081816003016000828254610c229190610def565b90915550506001810154604080516000815260208101859052908101919091526001600160a01b038516907fc8c928f301ebe78bb4c6c5376d72cf4169bd78ecb3cdb6c2babde81e5b0c38cc9060600160405180910390a2610cae565b42808255610c8e908490610def565b60018083019190915560028201805460ff19169091179055600381018290555b50505050565b600060208284031215610cc657600080fd5b81356001600160a01b0381168114610ad457600080fd5b600060208284031215610cef57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610d1f57610d1f610cf6565b92915050565b8082028115828204841417610d1f57610d1f610cf6565b600082610d5957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610d7057600080fd5b81518015158114610ad457600080fd5b805169ffffffffffffffffffff81168114610d9a57600080fd5b919050565b600080600080600060a08688031215610db757600080fd5b610dc086610d80565b9450602086015193506040860151925060608601519150610de360808701610d80565b90509295509295909350565b80820180821115610d1f57610d1f610cf656fea26469706673582212202dd48e63690399aa8005d6c2565004b64e715eed32c00141214cf67983b6370664736f6c63430008160033";

type SubscriptionV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubscriptionV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubscriptionV2__factory extends ContractFactory {
  constructor(...args: SubscriptionV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SubscriptionV2> {
    return super.deploy(_priceFeed, overrides || {}) as Promise<SubscriptionV2>;
  }
  override getDeployTransaction(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_priceFeed, overrides || {});
  }
  override attach(address: string): SubscriptionV2 {
    return super.attach(address) as SubscriptionV2;
  }
  override connect(signer: Signer): SubscriptionV2__factory {
    return super.connect(signer) as SubscriptionV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionV2Interface {
    return new utils.Interface(_abi) as SubscriptionV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubscriptionV2 {
    return new Contract(address, _abi, signerOrProvider) as SubscriptionV2;
  }
}
