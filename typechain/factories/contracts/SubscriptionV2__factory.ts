/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SubscriptionV2,
  SubscriptionV2Interface,
} from "../../contracts/SubscriptionV2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newPriceFeed",
        type: "address",
      },
    ],
    name: "PriceFeedUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
    ],
    name: "Subscribed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "newEndTime",
        type: "uint256",
      },
    ],
    name: "SubscriptionExtended",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newUSDCToken",
        type: "address",
      },
    ],
    name: "USDCTokenUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "DAILY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MONTHLY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PAYMENT_RECIPIENT",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "YEARLY_PRICE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getETHPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getSubscriptionStatus",
    outputs: [
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "remainingTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "setPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdcToken",
        type: "address",
      },
    ],
    name: "setUSDCToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
    ],
    name: "subscribeWithETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "plan",
        type: "uint256",
      },
    ],
    name: "subscribeWithUSDC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdcToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userSubscriptions",
    outputs: [
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "totalPaid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052600280546001600160a01b03191673036cbd53842c5426634e7929541ec2318f3dcf7e17905534801561003657600080fd5b50604051610da8380380610da883398101604081905261005591610101565b6001600055338061008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b610089816100af565b50600380546001600160a01b0319166001600160a01b0392909216919091179055610131565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006020828403121561011357600080fd5b81516001600160a01b038116811461012a57600080fd5b9392505050565b610c68806101406000396000f3fe6080604052600436106100f75760003560e01c80638fb456d71161008a578063a54069f411610059578063a54069f41461029d578063a607a8d9146102c5578063cf14b9e4146102dd578063f2fde38b1461034b57600080fd5b80638fb456d714610231578063921121621461024e5780639f809c8f14610261578063a06443771461027d57600080fd5b8063715018a6116100c6578063715018a6146101be578063724e78da146101d3578063741bef1a146101f35780638da5cb5b1461021357600080fd5b80630f5a9d011461010357806311eac855146101255780631ddda9b61461016257806350ada7281461019957600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e366004610b4c565b61036b565b005b34801561013157600080fd5b50600254610145906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016e57600080fd5b5061018261017d366004610b4c565b6103c8565b604080519215158352602083019190915201610159565b3480156101a557600080fd5b506101b0622625a081565b604051908152602001610159565b3480156101ca57600080fd5b50610123610454565b3480156101df57600080fd5b506101236101ee366004610b4c565b610468565b3480156101ff57600080fd5b50600354610145906001600160a01b031681565b34801561021f57600080fd5b506001546001600160a01b0316610145565b34801561023d57600080fd5b506101b068015af1d78b58c4000081565b61012361025c366004610b7c565b6104be565b34801561026d57600080fd5b506101b06722b1c8c1227a000081565b34801561028957600080fd5b50610123610298366004610b7c565b61078f565b3480156102a957600080fd5b506101457349ec6fff8d915dc8f1ff382941d0c5dadf9f013b81565b3480156102d157600080fd5b50642e90edd0006101b0565b3480156102e957600080fd5b506103256102f8366004610b4c565b60046020526000908152604090208054600182015460028301546003909301549192909160ff9091169084565b604080519485526020850193909352901515918301919091526060820152608001610159565b34801561035757600080fd5b50610123610366366004610b4c565b610973565b6103736109ae565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f60ecdd2cf009b737c2bad96928fb8b73fbcfee8a8bcf6e83f551f23895625e2f906020015b60405180910390a150565b6001600160a01b0381166000908152600460209081526040808320815160808101835281548152600182015493810193909352600281015460ff161580159284018390526003909101546060840152839291906104285750806020015142105b92504281602001511161043c57600061044c565b42816020015161044c9190610bab565b915050915091565b61045c6109ae565b61046660006109db565b565b6104706109ae565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fe5b20b8497e4f3e2435ef9c20e2e26b47497ee13745ce1c681ad6640653119e6906020016103bd565b6104c6610a2d565b80600114806104d55750806002145b806104e05750806003145b6105205760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b60448201526064015b60405180910390fd5b6000808260010361054657610539622625a0601e610bc4565b915062278d009050610576565b8260020361056357506722b1c8c1227a0000905062278d00610576565b5068015af1d78b58c4000090506301e133805b642e90edd00060008161059185670de0b6b3a7640000610bc4565b61059b9190610bdb565b9050803410156105e55760405162461bcd60e51b8152602060048201526015602482015274125b9cdd59999a58da595b9d08115512081cd95b9d605a1b6044820152606401610517565b6040516000907349ec6fff8d915dc8f1ff382941d0c5dadf9f013b9083908381818185875af1925050503d806000811461063b576040519150601f19603f3d011682016040523d82523d6000602084013e610640565b606091505b50509050806106865760405162461bcd60e51b815260206004820152601260248201527108cc2d2d8cac840e8de40e6cadcc8408aa8960731b6044820152606401610517565b8134111561072f5760003361069b8434610bab565b604051600081818185875af1925050503d80600081146106d7576040519150601f19603f3d011682016040523d82523d6000602084013e6106dc565b606091505b505090508061072d5760405162461bcd60e51b815260206004820152601b60248201527f4661696c656420746f20726566756e64206578636573732045544800000000006044820152606401610517565b505b61073a338587610a57565b604080518781526020810187905290810185905233907f5ad333a6d56a7ddb1e78d9ecb8047e9dafcb890a41a227ede8d950259a1f0f759060600160405180910390a2505050505061078c6001600055565b50565b610797610a2d565b80600114806107a65750806002145b806107b15750806003145b6107ec5760405162461bcd60e51b815260206004820152600c60248201526b24b73b30b634b210383630b760a11b6044820152606401610517565b6000808260010361081257610805622625a0601e610bc4565b915062278d009050610842565b8260020361082f57506722b1c8c1227a0000905062278d00610842565b5068015af1d78b58c4000090506301e133805b6002546040516323b872dd60e01b81523360048201527349ec6fff8d915dc8f1ff382941d0c5dadf9f013b6024820152604481018490526000916001600160a01b0316906323b872dd906064016020604051808303816000875af11580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d29190610bfd565b9050806109185760405162461bcd60e51b81526020600482015260146024820152731554d110c81d1c985b9cd9995c8819985a5b195960621b6044820152606401610517565b610923338385610a57565b604080518581526020810185905290810183905233907f5ad333a6d56a7ddb1e78d9ecb8047e9dafcb890a41a227ede8d950259a1f0f759060600160405180910390a250505061078c6001600055565b61097b6109ae565b6001600160a01b0381166109a557604051631e4fbdf760e01b815260006004820152602401610517565b61078c816109db565b6001546001600160a01b031633146104665760405163118cdaa760e01b8152336004820152602401610517565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600260005403610a5057604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b6001600160a01b0383166000908152600460205260409020600281015460ff168015610a865750428160010154115b15610b175782816001016000828254610a9f9190610c1f565b9250508190555081816003016000828254610aba9190610c1f565b90915550506001810154604080516000815260208101859052908101919091526001600160a01b038516907fc8c928f301ebe78bb4c6c5376d72cf4169bd78ecb3cdb6c2babde81e5b0c38cc9060600160405180910390a2610b46565b42808255610b26908490610c1f565b60018083019190915560028201805460ff19169091179055600381018290555b50505050565b600060208284031215610b5e57600080fd5b81356001600160a01b0381168114610b7557600080fd5b9392505050565b600060208284031215610b8e57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610bbe57610bbe610b95565b92915050565b8082028115828204841417610bbe57610bbe610b95565b600082610bf857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c0f57600080fd5b81518015158114610b7557600080fd5b80820180821115610bbe57610bbe610b9556fea26469706673582212203af3200f7eb01a23f4e37091bfafcb605f62fb23be3a16428a5047d1d6920aa164736f6c63430008140033";

type SubscriptionV2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubscriptionV2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubscriptionV2__factory extends ContractFactory {
  constructor(...args: SubscriptionV2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SubscriptionV2> {
    return super.deploy(_priceFeed, overrides || {}) as Promise<SubscriptionV2>;
  }
  override getDeployTransaction(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_priceFeed, overrides || {});
  }
  override attach(address: string): SubscriptionV2 {
    return super.attach(address) as SubscriptionV2;
  }
  override connect(signer: Signer): SubscriptionV2__factory {
    return super.connect(signer) as SubscriptionV2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubscriptionV2Interface {
    return new utils.Interface(_abi) as SubscriptionV2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubscriptionV2 {
    return new Contract(address, _abi, signerOrProvider) as SubscriptionV2;
  }
}
