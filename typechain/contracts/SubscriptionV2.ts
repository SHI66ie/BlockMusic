/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SubscriptionV2Interface extends utils.Interface {
  functions: {
    "DAILY_PRICE()": FunctionFragment;
    "MONTHLY_PRICE()": FunctionFragment;
    "PAYMENT_RECIPIENT()": FunctionFragment;
    "YEARLY_PRICE()": FunctionFragment;
    "getETHPrice()": FunctionFragment;
    "getSubscriptionStatus(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPriceFeed(address)": FunctionFragment;
    "setUSDCToken(address)": FunctionFragment;
    "subscribeWithETH(uint256)": FunctionFragment;
    "subscribeWithUSDC(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "userSubscriptions(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DAILY_PRICE"
      | "MONTHLY_PRICE"
      | "PAYMENT_RECIPIENT"
      | "YEARLY_PRICE"
      | "getETHPrice"
      | "getSubscriptionStatus"
      | "owner"
      | "priceFeed"
      | "renounceOwnership"
      | "setPriceFeed"
      | "setUSDCToken"
      | "subscribeWithETH"
      | "subscribeWithUSDC"
      | "transferOwnership"
      | "usdcToken"
      | "userSubscriptions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DAILY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONTHLY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_RECIPIENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YEARLY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getETHPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUSDCToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithUSDC",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userSubscriptions",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DAILY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONTHLY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_RECIPIENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YEARLY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getETHPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUSDCToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userSubscriptions",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedUpdated(address)": EventFragment;
    "Subscribed(address,uint256,uint256,uint256)": EventFragment;
    "SubscriptionExtended(address,uint256,uint256,uint256)": EventFragment;
    "USDCTokenUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USDCTokenUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceFeedUpdatedEventObject {
  newPriceFeed: string;
}
export type PriceFeedUpdatedEvent = TypedEvent<
  [string],
  PriceFeedUpdatedEventObject
>;

export type PriceFeedUpdatedEventFilter =
  TypedEventFilter<PriceFeedUpdatedEvent>;

export interface SubscribedEventObject {
  user: string;
  plan: BigNumber;
  amount: BigNumber;
  duration: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SubscriptionExtendedEventObject {
  user: string;
  plan: BigNumber;
  amount: BigNumber;
  newEndTime: BigNumber;
}
export type SubscriptionExtendedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  SubscriptionExtendedEventObject
>;

export type SubscriptionExtendedEventFilter =
  TypedEventFilter<SubscriptionExtendedEvent>;

export interface USDCTokenUpdatedEventObject {
  newUSDCToken: string;
}
export type USDCTokenUpdatedEvent = TypedEvent<
  [string],
  USDCTokenUpdatedEventObject
>;

export type USDCTokenUpdatedEventFilter =
  TypedEventFilter<USDCTokenUpdatedEvent>;

export interface SubscriptionV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DAILY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMENT_RECIPIENT(overrides?: CallOverrides): Promise<[string]>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    getETHPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isActive: boolean; remainingTime: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUSDCToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeWithETH(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeWithUSDC(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    userSubscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        isActive: boolean;
        totalPaid: BigNumber;
      }
    >;
  };

  DAILY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMENT_RECIPIENT(overrides?: CallOverrides): Promise<string>;

  YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getSubscriptionStatus(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isActive: boolean; remainingTime: BigNumber }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceFeed(
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUSDCToken(
    _usdcToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeWithETH(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeWithUSDC(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  userSubscriptions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber] & {
      startTime: BigNumber;
      endTime: BigNumber;
      isActive: boolean;
      totalPaid: BigNumber;
    }
  >;

  callStatic: {
    DAILY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_RECIPIENT(overrides?: CallOverrides): Promise<string>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isActive: boolean; remainingTime: BigNumber }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUSDCToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeWithETH(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeWithUSDC(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    userSubscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber] & {
        startTime: BigNumber;
        endTime: BigNumber;
        isActive: boolean;
        totalPaid: BigNumber;
      }
    >;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceFeedUpdated(address)"(
      newPriceFeed?: null
    ): PriceFeedUpdatedEventFilter;
    PriceFeedUpdated(newPriceFeed?: null): PriceFeedUpdatedEventFilter;

    "Subscribed(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null,
      duration?: null
    ): SubscribedEventFilter;
    Subscribed(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null,
      duration?: null
    ): SubscribedEventFilter;

    "SubscriptionExtended(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null,
      newEndTime?: null
    ): SubscriptionExtendedEventFilter;
    SubscriptionExtended(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      amount?: null,
      newEndTime?: null
    ): SubscriptionExtendedEventFilter;

    "USDCTokenUpdated(address)"(
      newUSDCToken?: null
    ): USDCTokenUpdatedEventFilter;
    USDCTokenUpdated(newUSDCToken?: null): USDCTokenUpdatedEventFilter;
  };

  estimateGas: {
    DAILY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_RECIPIENT(overrides?: CallOverrides): Promise<BigNumber>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    getETHPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUSDCToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeWithETH(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeWithUSDC(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    userSubscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAILY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAYMENT_RECIPIENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getETHPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceFeed(
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUSDCToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithETH(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithUSDC(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userSubscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
