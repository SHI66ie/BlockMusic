/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SubscriptionManagerInterface extends utils.Interface {
  functions: {
    "MONTH()": FunctionFragment;
    "MONTHLY_PRICE()": FunctionFragment;
    "THREE_MONTHS()": FunctionFragment;
    "THREE_MONTHS_PRICE()": FunctionFragment;
    "YEAR()": FunctionFragment;
    "YEARLY_PRICE()": FunctionFragment;
    "cancelSubscription()": FunctionFragment;
    "extendSubscription(uint8)": FunctionFragment;
    "getPlanDuration(uint8)": FunctionFragment;
    "getPlanPrice(uint8)": FunctionFragment;
    "getRemainingTime(address)": FunctionFragment;
    "isSubscribed(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUsdcToken(address)": FunctionFragment;
    "subscribe(uint8)": FunctionFragment;
    "subscriptions(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MONTH"
      | "MONTHLY_PRICE"
      | "THREE_MONTHS"
      | "THREE_MONTHS_PRICE"
      | "YEAR"
      | "YEARLY_PRICE"
      | "cancelSubscription"
      | "extendSubscription"
      | "getPlanDuration"
      | "getPlanPrice"
      | "getRemainingTime"
      | "isSubscribed"
      | "owner"
      | "renounceOwnership"
      | "setUsdcToken"
      | "subscribe"
      | "subscriptions"
      | "transferOwnership"
      | "usdcToken"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MONTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MONTHLY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THREE_MONTHS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "THREE_MONTHS_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "YEAR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "YEARLY_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extendSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlanPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscribed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdcToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MONTH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MONTHLY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THREE_MONTHS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "THREE_MONTHS_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "YEAR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "YEARLY_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlanPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSubscribed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdcToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Subscribed(address,uint8,uint256,uint256)": EventFragment;
    "SubscriptionCancelled(address)": EventFragment;
    "SubscriptionExtended(address,uint8,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SubscribedEventObject {
  user: string;
  plan: number;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type SubscribedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface SubscriptionCancelledEventObject {
  user: string;
}
export type SubscriptionCancelledEvent = TypedEvent<
  [string],
  SubscriptionCancelledEventObject
>;

export type SubscriptionCancelledEventFilter =
  TypedEventFilter<SubscriptionCancelledEvent>;

export interface SubscriptionExtendedEventObject {
  user: string;
  plan: number;
  newEndTime: BigNumber;
}
export type SubscriptionExtendedEvent = TypedEvent<
  [string, number, BigNumber],
  SubscriptionExtendedEventObject
>;

export type SubscriptionExtendedEventFilter =
  TypedEventFilter<SubscriptionExtendedEvent>;

export interface WithdrawnEventObject {
  to: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface SubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MONTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    THREE_MONTHS_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    extendSubscription(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPlanDuration(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlanPrice(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsdcToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, number] & {
        startTime: BigNumber;
        endTime: BigNumber;
        isActive: boolean;
        plan: number;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MONTH(overrides?: CallOverrides): Promise<BigNumber>;

  MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

  THREE_MONTHS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  cancelSubscription(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  extendSubscription(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPlanDuration(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlanPrice(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingTime(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isSubscribed(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsdcToken(
    _usdcToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    plan: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, number] & {
      startTime: BigNumber;
      endTime: BigNumber;
      isActive: boolean;
      plan: number;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  withdraw(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    THREE_MONTHS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSubscription(overrides?: CallOverrides): Promise<void>;

    extendSubscription(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPlanDuration(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanPrice(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUsdcToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, number] & {
        startTime: BigNumber;
        endTime: BigNumber;
        isActive: boolean;
        plan: number;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    withdraw(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Subscribed(address,uint8,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      startTime?: null,
      endTime?: null
    ): SubscribedEventFilter;
    Subscribed(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      startTime?: null,
      endTime?: null
    ): SubscribedEventFilter;

    "SubscriptionCancelled(address)"(
      user?: PromiseOrValue<string> | null
    ): SubscriptionCancelledEventFilter;
    SubscriptionCancelled(
      user?: PromiseOrValue<string> | null
    ): SubscriptionCancelledEventFilter;

    "SubscriptionExtended(address,uint8,uint256)"(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      newEndTime?: null
    ): SubscriptionExtendedEventFilter;
    SubscriptionExtended(
      user?: PromiseOrValue<string> | null,
      plan?: null,
      newEndTime?: null
    ): SubscriptionExtendedEventFilter;

    "Withdrawn(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<BigNumber>;

    THREE_MONTHS_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    extendSubscription(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPlanDuration(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlanPrice(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsdcToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MONTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTHLY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    THREE_MONTHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    THREE_MONTHS_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    YEARLY_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelSubscription(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    extendSubscription(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPlanDuration(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlanPrice(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSubscribed(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsdcToken(
      _usdcToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      plan: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
